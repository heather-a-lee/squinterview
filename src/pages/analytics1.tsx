import PointCanvas from "@/components/PointCanvas";
import { LOCAL_STORAGE_KEY } from "@/constants";
import { MaxAreaData, Point, PointDict } from "@/types";
import { getLargestTriangle, renderPoint } from "@/utils";
import { Container, Row, Col, Text } from "@nextui-org/react";
import axios from "axios";
import Head from "next/head";
import Link from "next/link";
import { useEffect, useState } from "react";

export default function Analytics() {
  const [points, setPoints] = useState<Point[]>([]);
  const [maxAreaData, setMaxAreaData] = useState<MaxAreaData>({
    maxArea: 0,
  });
  const [funFact, setFunFact] = useState("");

  useEffect(() => {
    const data = localStorage.getItem(LOCAL_STORAGE_KEY);
    if (!data) return;
    const trianglePoints = JSON.parse(data) as PointDict[];
    const points = trianglePoints.flatMap((trianglePoint) => {
      return Object.values(trianglePoint);
    });
    setPoints(points);
    const { maxArea, maxPoints } = getLargestTriangle(points);
    if (maxPoints) {
      setMaxAreaData({ maxArea, maxPoints });
      axios
        .get(`http://numbersapi.com/${maxArea}`)
        .then((res) => res.data)
        .then((data) => {
          console.log("Setting fun fact to", data);
          setFunFact(data);
        });
    }
  }, []);

  const renderMaxAreaData = () => {
    if (!maxAreaData) return null;
    if (!maxAreaData.maxPoints) return null;
    return (
      <>
        <div>
          {Object.values(maxAreaData.maxPoints).map((pointValue) => (
            <span key={JSON.stringify(pointValue)}>
              {renderPoint(pointValue)}
            </span>
          ))}
        </div>
        <div>Area: {maxAreaData.maxArea}</div>
        {funFact && (
          <div>
            {`Trivia about ${maxAreaData.maxArea}`}: {funFact}
          </div>
        )}
      </>
    );
  };

  return (
    <>
      <Head>
        <title>Squinterview</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <Container>
        {!points && (
          <div>
            No points yet. Add them <Link href="/">here</Link>?
          </div>
        )}
        {points && (
          <Row>
            <Col>
              <Text size="$2xl">Largest Triangle</Text>
              {renderMaxAreaData()}
            </Col>
            <Col>
              <PointCanvas points={points} maxAreaData={maxAreaData} />
            </Col>
          </Row>
        )}
      </Container>
    </>
  );
}
